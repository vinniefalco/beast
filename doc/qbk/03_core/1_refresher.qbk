[/
    Copyright (c) 2016-2017 Vinnie Falco (vinnie dot falco at gmail dot com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    Official repository: https://github.com/boostorg/beast
]

[section:asio_refresher Refresher]

To use Beast effectively, a prior understanding of networking is required.
This section reviews networking concepts as a reminder and guide for further
learning.

A
[@https://en.wikipedia.org/wiki/Computer_network ['network]]
allows programs located anywhere to exchange information after opting-in
to communications by establishing a
[@https://en.wikipedia.org/wiki/Data_link ['connection]].
Data may be reliably transferred across a connection in both directions
([@https://en.wikipedia.org/wiki/Duplex_(telecommunications) ['full-duplex]])
with bytes arriving in the same order they were sent. These connections, along
with the objects and types used to represent them, are collectively termed
[link beast.concepts.streams ['streams]].

The
[@https://en.wikipedia.org/wiki/Internet ['internet]]
is a global network of interconnected computers that use a variety of
standardized communication protocols to exchange information. The most
popular protocol is
[@https://en.wikipedia.org/wiki/Transmission_Control_Protocol ['TCP/IP]],
which this library relies on exclusively. The protocol takes care of the
low level details so that applications see a
['stream], which is the reliable, full-duplex connection carrying the ordered
set of bytes described above.

A vendor supplies a program called a
[@https://en.wikipedia.org/wiki/Device_driver ['device driver]],
enabling networking hardware such as an
[@https://en.wikipedia.org/wiki/Network_interface_controller ['ethernet adaptor]]
to talk to the operating system. This in turn permits running programs to
interact with networking using various flavors of interfaces such as
[@https://en.wikipedia.org/wiki/Berkeley_sockets ['Berkeley sockets]] or
[@https://en.wikipedia.org/wiki/Winsock ['Windows Sockets 2]] ("Winsock").

C++ Networking, represented by __NetTS__ and __Asio__, provides another layer
of abstraction with features such as:

* Deadline timers
* Buffer sequences
* Stream concepts
* Asynchronous I/O

These concepts enable generic programming so that higher levels of abstraction
may be composed to arbitrary degree. In fact, the interfaces and concepts
offered by networking are best described as providing support for general
[@https://en.wikipedia.org/wiki/Input/output ['input/output]] ("I/O")
algorithms, including networking.

[heading Buffers]

A
[@https://en.wikipedia.org/wiki/Data_buffer ['buffer]]
holds a contiguous sequence of bytes used when reading or writing data with
objects that perform I/O.
The networking types __const_buffer__ and __mutable_buffer__ represent
these memory regions as type-safe pointer/size pairs, as shown below:

[code_core_1_refresher_1]

[tip
    Networking uses custom buffer types because `span<byte>` does too much.
    It not only type-erases the original pointer but also recasts it to a
    pointer-to-byte. The operating system doesn't care about this, but if
    a user wants to send and receive an array of some other type, presenting
    it as an array of bytes which supports bitwise operations is unnecessary.
    Custom buffer types also enable networking implementations to provide
    targeted features such as
    [@boost:/doc/html/boost_asio/overview/core/buffers.html#boost_asio.overview.core.buffers.buffer_debugging ['buffer debugging]]
    without changing the more general vocabulary types.
]

The concepts
__ConstBufferSequence__ and __MutableBufferSequence__ describe bidirectional
ranges whose value type is convertible to `const_buffer` and
`mutable_buffer` respectively. Buffer sequences may be used to transact
in multiple buffers in a single function call, a technique sometimes
referred to as
[@https://en.wikipedia.org/wiki/Vectored_I/O ['scatter/gather I/O]].
Buffers and sequences are non-owning; copies produce shallow references and
not duplicates of the underlying memory. Each of these statements declares
a buffer sequence:

[code_core_1_refresher_2]

The __DynamicBuffer__ concept defines a buffer container with an interface
that supports increasing and decreasing the size of the managed buffer
sequence. Beast and networking use dynamic buffers when the amount of
storage required to perform an operation is not known ahead of time,
such as when reading a complete HTTP message.

[heading Synchronous I/O]

Synchronous input and output is accomplished through blocking function
calls that provide the complete results of the operation upon returning.
Such operations typically cannot be canceled and do not have a method for
setting a timeout. The __SyncReadStream__ and __SyncWriteStream__ concepts
define requirements for
['synchronous streams]:
a portable I/O abstraction that exchanges data using buffer sequences
to represent bytes and either `error_code` or an exception to report
any failures.

A
['synchronous stream algorithm]
is written as a function template accepting a stream object meeting the
named requirements for synchronous reading, writing, or both. This example
shows an algorithm which writes text and uses exceptions to indicate errors:

[code_core_1_refresher_3]

The same algorithm may be expressed using error codes instead of exceptions:

[code_core_1_refresher_4]

[heading Asynchronous I/O]

An asynchronous operation begins with a call to an
[@boost:/doc/html/boost_asio/reference/asynchronous_operations.html ['initiating function]],
which starts the operation and returns to the caller immediately. This
['outstanding]
asynchronous operation continues to make progress concurrently without
blocking. When the externally observable side effects are fully established,
a movable function object known as a
[@boost:/doc/html/boost_asio/reference/CompletionHandler.html ['completion handler]]
provided in the initiating function call is queued for execution with the
results, which may include the error code and other specific information.
An asynchronous operation is said to be
['completed]
after the completion handler is queued. The code that follows shows how some
text may be written to a
[@boost:/doc/html/boost_asio/reference/ip__tcp/socket.html `socket`]
asynchronously, invoking a lambda when the
operation is complete:

[code_core_1_refresher_5]

Every completion handler (also referred to as a
[@https://en.wikipedia.org/wiki/Continuation ['continuation]])
has both an
[@boost:/doc/html/boost_asio/overview/core/allocation.html ['associated allocator]]
and an
[@boost:/doc/html/boost_asio/reference/associated_executor.html ['associated executor]].
The allocator may be used to obtain temporary storage (which [*must] be
deallocated before the completion handler is invoked), while the executor
is a cheaply copyable object providing the algorithm used to invoke the
completion handler. Unless customized by the caller, a completion handler
defaults to using `std::allocator<void>` and the executor of the
corresponding I/O object.

Networking prescribes facilities to determine the context in which
handlers run. Every I/O object refers to an __ExecutionContext__ for
obtaining the __Executor__ instance used to invoke completion handlers.
An executor determines where and how completion handlers are invoked.
Executors obtained from an instance of __io_context__ offer a basic guarantee:
handlers will only be invoked from threads which are currently calling
[@boost:/doc/html/boost_asio/reference/io_context/run/overload1.html `net::io_context::run`].

The __AsyncReadStream__ and __AsyncWriteStream__ concepts define requirements for
['asynchronous streams]:
a portable I/O abstraction that exchanges data asynchronously using buffer
sequences to represent bytes and `error_code` to report any failures. An
['asynchronous stream algorithm]
is written as a templated initiating function template accepting a stream
object meeting the named requirements for asynchronous reading, writing, or
both. This example shows an algorithm which writes some text to an
asynchronous stream:

[code_core_1_refresher_6]

[heading Concurrency]

I/O objects such as sockets and streams [*are not thread-safe]. Although
it is possible to have more than one operation outstanding (for example,
a simultaneous asynchronous read and asynchronous write) the stream object
itself may only be accessed from one thread at a time. This means that
member functions such as move constructors, destructors, or initiating
functions must not be called concurrently. Usually this is accomplished
with synchronization primitives such as a
[@https://en.cppreference.com/w/cpp/thread/mutex `mutex`],
but concurrent network programs need a better way to access shared resources,
since acquiring ownership of a mutex could block threads from performing
uncontended work. For efficiency, networking adopts a model of using threads
without explicit locking by requiring all access to I/O objects to be
performed within a
[@boost:/doc/html/boost_asio/overview/core/strands.html ['strand]].

[heading Asynchronous Model]

Completion handlers are native to networking but cause an inversion of the
flow of control. Alternatives to using completion handlers include futures,
fibers, coroutines, or user-defined types. Networking supports these
alternatives with a feature that provides these hooks for customizing
initiating functions:

* Converting a custom ['CompletionToken] to a "real" handler type

* Creating the initiating function's result





[/
            The system
            for customizing the return type of initiating functions and obtaining the
            actual completion handler from a completion token is known as the
            [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3747.pdf ['Universal Model for Asynchronous Operations]] (N3747).
            This generic example shows the signature for an initiating function to
            write some text to a stream:
            ```
                template <class AsyncWriteStream, class WriteHandler>
                auto async_hello (AsyncWriteStream& stream, WriteHandler&& handler);
            ```

            The signature for the initiating function includes a
            ['completion token],
            which is a generalization of completion handlers permitting user-defined
            types such as futures or coroutines to be substituted as the mechanism by
            which the results of the asynchronous operation are delivered. The following
            statements all call the same function to asynchronously read data from a
            stream, but use a different method for receiving the results:
]

[/-----------------------------------------------------------------------------]

[heading Using Networking]

[warning
    Beast does not manage sockets, make outgoing connections,
    accept incoming connections, handle timeouts, close endpoints,
    do name lookups, deal with TLS certificates, perform authentication,
    or otherwise handle any aspect of connection management. This is
    left to the interfaces already existing on the underlying streams.
]

Library stream algorithms require a __socket__, __ssl_stream__, or other
__Stream__ object that has already established communication with a remote
peer. This example is provided as a reminder of how to work with
sockets:

[snippet_core_2]

Throughout this documentation identifiers with the following names have
special meaning:

[table Global Variables
[[Name][Description]]
[[
    [@boost:/doc/html/boost_asio/reference/io_context.html [*`ioc`]]
][
    A variable of type __io_context__ which is running on one separate thread,
    and upon which an __executor_work_guard__ object has been constructed.
]]
[[
    [@boost:/doc/html/boost_asio/reference/ip__tcp/socket.html [*`sock`]]
][
    A variable of type
    [@boost:/doc/html/boost_asio/reference/ip__tcp/socket.html `tcp::socket`]
    which has already been connected to a remote host.
]]
[[
    [@boost:/doc/html/boost_asio/reference/ssl__stream.html [*`ssl_sock`]]
][
    A variable of type
    [@boost:/doc/html/boost_asio/reference/ssl__stream.html `net::ssl::stream<tcp::socket>`]
    which is already connected and has handshaked with a remote host.
]]
[[
    [link beast.ref.boost__beast__websocket__stream [*`ws`]]
][
    A variable of type
    [link beast.ref.boost__beast__websocket__stream `websocket::stream<tcp::socket>`]
    which is already connected with a remote host.
]]
]

[endsect]
